{"pageProps":{"note":{"id":"uc39famxcn27h2n75k0c4v8","title":"Input","desc":"","updated":1641373041260,"created":1641373041260,"custom":{},"fname":"s.l.cpp.files.input","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"8673ee926e0924293fc4786ad6c2766a","links":[],"anchors":{"input":{"type":"header","text":"Input","value":"input","line":9,"column":0,"depth":3}},"children":[],"parent":"fmdaknvnfoz0e7w9uhdo2yf","data":{}},"body":"<h1 id=\"input\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#input\"></a>Input</h1>\n<h3 id=\"input-1\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#input-1\"></a>Input</h3>\n<blockquote>\n<p>Sometimes a program should get input from a file rather than from a user typing on a keyboard. To achieve this, a programmer can create a new input stream that comes from a file, rather than the predefined input stream <code>cin</code> that comes from the standard input (keyboard). That new input stream can then be used just like <code>cin</code>, as the following program illustrates. Assume a text file exists named <em>myfile.txt</em> with the contents shown (created for example using Notepad on a Windows computer or using TextEdit on a Mac computer).</p>\n</blockquote>\n<pre><code>myfile.txt with two integers:\n5\n10\n</code></pre>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;fstream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   ifstream inFS<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Input file stream</span>\n   <span class=\"token keyword\">int</span> fileNum1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Data value from file</span>\n   <span class=\"token keyword\">int</span> fileNum2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Data value from file</span>\n   \n   <span class=\"token comment\">// Try to open file</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Opening file myfile.txt.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   inFS<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inFS<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Could not open file myfile.txt.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 indicates error</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token comment\">// Can now use inFS stream like cin stream</span>\n   <span class=\"token comment\">// myfile.txt should contain two integers, else problems</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Reading two integers.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   inFS <span class=\"token operator\">>></span> fileNum1<span class=\"token punctuation\">;</span>\n   inFS <span class=\"token operator\">>></span> fileNum2<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Closing file myfile.txt.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   inFS<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Done with file, so close it</span>\n   \n   <span class=\"token comment\">// Ouput values read from file</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num1: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> fileNum1 <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num2: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> fileNum2 <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num1 + num2: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">(</span>fileNum1 <span class=\"token operator\">+</span> fileNum2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><strong>Five</strong> lines are needed for the new input stream, highlighted above.\n.</p>\n<ul>\n<li>The <code>#include &#x3C;fstream></code> (for \"<em>file stream</em>\") enables use of the file stream class.</li>\n<li>A new stream variable has been declared: <code>ifstream inFS;</code>. <code>ifstream</code> is short for <em>input file stream</em>, and is derived from <code>istream</code>.</li>\n<li>The line <code>inFS.open(\"myfile.txt\");</code> opens the file for reading and associates the file with the <code>inFS</code> stream. Because of the high likelihood that the open fails, usually because the file does not exist or is in use by another program, the program checks whether the open was successful using <code>if (!inFS.is_open())</code>.</li>\n<li>The successfully opened input stream can then be used just like the <code>cin</code> stream, e.g., using <code>inFS >> num1;</code> to read an integer into <code>num1</code>.</li>\n<li>Finally, when done using the stream, the program closes the file using <code>inFS.close()</code>.</li>\n<li>A common error is to type <code>cin >> num1;</code> when actually intending to get data from a file as in <code>inFS >> num1</code>. Another common error is a mismatch between the variable data type and the file data, e.g., if the data type is int but the file data is \"Hello\".</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>The <code>inFS.open(str)</code> function has a string parameter str, which can be a C++ string or a null-terminated C string. A program often uses a user-entered string as the filename, such as using <code>cin >> filename;</code>.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* Given\n\ndatafile.txt with two integers:\n72\n68\n\n*/</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;fstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;string></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   ifstream inFS<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Input file stream</span>\n   <span class=\"token keyword\">int</span> fileNum1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// File data</span>\n   <span class=\"token keyword\">int</span> fileNum2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// File data</span>\n   string filename <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Input filename</span>\n   \n   <span class=\"token comment\">// Prompt user for filename</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter filename: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cin <span class=\"token operator\">>></span> filename<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Try to open file</span>\n   inFS<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inFS<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Could not open file \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> filename <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token comment\">// Get numbers. If too few, may encounter problems</span>\n   inFS <span class=\"token operator\">>></span> fileNum1<span class=\"token punctuation\">;</span>\n   inFS <span class=\"token operator\">>></span> fileNum2<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Done with file, close it</span>\n   inFS<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Ouput values read from file</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num1: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> fileNum1 <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num2: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> fileNum2 <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num1 + num2: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">(</span>fileNum1 <span class=\"token operator\">+</span> fileNum2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\tEnter filename: \n\tdatafile.txt\n\tnum1: 72\n\tnum2: 68\n\tnum1 + num2: 140\n*/</span>\n</code></pre>\n<blockquote>\n<p>A program can read varying amounts of data in a file by using a loop that reads until the end of the file has been reached, as follows.\n.\nThe <code>eof()</code> function returns true if the previous stream operation reached the end of the file. Errors may be encountered while attempting to read from a file, including end-of-file, corrupt data, etc. So, a program should check that each read was successful before using the variable to which the data read was assigned. The <code>good()</code> function returns true if the previous stream operation had no problems. Ex:  <code>if( inFS.good() ) {...} </code>checks that the previous read operation was successful.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* Given:\n\tmyfile.txt with variable number of integers:\n\t111\n\t222\n\t333\n\t444\n\t555\n*/</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;fstream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   ifstream inFS<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Input file stream</span>\n   <span class=\"token keyword\">int</span> fileNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// File data</span>\n   \n   <span class=\"token comment\">// Open file</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Opening file myfile.txt.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   inFS<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inFS<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Could not open file myfile.txt.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>      \n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token comment\">// Print read numbers to output</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Reading and printing numbers.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inFS<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      inFS <span class=\"token operator\">>></span> fileNum<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> inFS<span class=\"token punctuation\">.</span><span class=\"token function\">good</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> fileNum <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Closing file myfile.txt.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Done with file, so close it</span>\n   inFS<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\tOpening file myfile.txt.\n\tReading and printing numbers.\n\tnum: 111\n\tnum: 222\n\tnum: 333\n\tnum: 444\n\tnum: 555\n\tClosing file myfile.txt.\n*/</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}