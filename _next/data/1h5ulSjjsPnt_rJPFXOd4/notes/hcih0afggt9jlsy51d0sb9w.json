{"pageProps":{"note":{"id":"hcih0afggt9jlsy51d0sb9w","title":"Black Jack Example","desc":"","updated":1641426749880,"created":1641426749880,"custom":{},"fname":"s.l.python.libs.pytest.black-jack-example","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"e81f6bfe8df49be074c0bb2dd8fda3ca","links":[{"type":"wiki","from":{"fname":"s.l.python.libs.pytest.black-jack-example","id":"hcih0afggt9jlsy51d0sb9w","vaultName":"DevLog"},"value":"terms.dry","alias":"DRY","position":{"start":{"line":41,"column":29,"offset":812},"end":{"line":41,"column":46,"offset":829},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"terms.dry"}},{"type":"wiki","from":{"fname":"s.l.python.libs.pytest.black-jack-example","id":"hcih0afggt9jlsy51d0sb9w","vaultName":"DevLog"},"value":"import.pytest","alias":"pytest","position":{"start":{"line":41,"column":57,"offset":840},"end":{"line":41,"column":81,"offset":864},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"import.pytest"}},{"type":"wiki","from":{"fname":"s.l.python.libs.pytest.black-jack-example","id":"hcih0afggt9jlsy51d0sb9w","vaultName":"DevLog"},"value":"import.pytest","alias":"pytest","position":{"start":{"line":59,"column":3,"offset":1363},"end":{"line":59,"column":27,"offset":1387},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"import.pytest"}},{"type":"wiki","from":{"fname":"s.l.python.libs.pytest.black-jack-example","id":"hcih0afggt9jlsy51d0sb9w","vaultName":"DevLog"},"value":"s.m.html","alias":"s.m.html","position":{"start":{"line":113,"column":5,"offset":2767},"end":{"line":113,"column":17,"offset":2779},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"s.m.html"}}],"anchors":{"black-jack-repo-project-example":{"type":"header","text":"Black Jack Repo Project Example","value":"black-jack-repo-project-example","line":9,"column":0,"depth":3},"blackjackpy":{"type":"header","text":"blackjack.py","value":"blackjackpy","line":13,"column":0,"depth":4},"test_blackjackpy":{"type":"header","text":"test_blackjack.py","value":"test_blackjackpy","line":27,"column":0,"depth":4},"blackjack-with-dry-pytests":{"type":"header","text":"Blackjack with DRY Pytests","value":"blackjack-with-dry-pytests","line":63,"column":0,"depth":4},"blackjack":{"type":"header","text":"blackjack","value":"blackjack","line":77,"column":0,"depth":5},"tests":{"type":"header","text":"tests","value":"tests","line":98,"column":0,"depth":5}},"children":[],"parent":"p7o36tilo5ljx9je2jo21hy","data":{}},"body":"<h1 id=\"black-jack-example\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#black-jack-example\"></a>Black Jack Example</h1>\n<h3 id=\"black-jack-repo-project-example\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#black-jack-repo-project-example\"></a>Black Jack Repo Project Example</h3>\n<ul>\n<li><a href=\"https://github.com/koaning/blackjack/\">Sample Repo for this project</a></li>\n</ul>\n<h4 id=\"blackjackpy\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#blackjackpy\"></a>blackjack.py</h4>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">card_score</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> cards <span class=\"token keyword\">if</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">\"23456789\"</span><span class=\"token punctuation\">]</span>\n  faces <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> cards <span class=\"token keyword\">if</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">\"JQK\"</span><span class=\"token punctuation\">]</span>\n  n_aces <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> cards <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  score <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">while</span> n_aces <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t  score <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> score <span class=\"token operator\">+</span> <span class=\"token number\">11</span> <span class=\"token operator\">></span> <span class=\"token number\">21</span> <span class=\"token keyword\">else</span> <span class=\"token number\">11</span>\n\t  n_aces <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">return</span> score <span class=\"token keyword\">if</span> score <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">21</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n</code></pre>\n<h4 id=\"test_blackjackpy\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#test_blackjackpy\"></a>test_blackjack.py</h4>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytest\n\n<span class=\"token keyword\">from</span> blackjack <span class=\"token keyword\">import</span> card_score\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_simple_usecase1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  card_score<span class=\"token punctuation\">(</span><span class=\"token string\">\"JK\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">20</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_simple_usecase2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  card_score<span class=\"token punctuation\">(</span><span class=\"token string\">\"JKQ\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_simple_usecase3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  card_score<span class=\"token punctuation\">(</span><span class=\"token string\">\"KA\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">21</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_simple_usecase4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  card_score<span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">12</span>\n</code></pre>\n<ul>\n<li>A more robust way to stay <a href=\"/DevLog/notes/61vxjcmjavnv2oj9cgtby39\">DRY</a> is to use <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">pytest (Private)</a></li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>parametrize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cards,score\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'KKK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'AA'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'AK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_simple_usecase</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">assert</span> card_score<span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> score\n</code></pre>\n<ul>\n<li>Run tests with <code>pytest --verbose</code> or configure auto process to do that\n<ul>\n<li>pytest is looking for files and functions whose names begin with <code>test_*</code></li>\n<li>You can run singular unit tests with the following syntax:</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">pytest --verbose test_blackjack.py::test_Simple_case4\n</code></pre>\n<h4 id=\"blackjack-with-dry-pytests\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#blackjack-with-dry-pytests\"></a>Blackjack with DRY Pytests</h4>\n<ul>\n<li><a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">pytest (Private)</a> in a package</li>\n</ul>\n<pre><code>├── blackjack\n│   ├── __init__.py\n│   └── common.py\n├── setup.py\n└── tests\n  ├── __init__.py\n  └── test_blackjack.py\n</code></pre>\n<h5 id=\"blackjack\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#blackjack\"></a>blackjack</h5>\n<ul>\n<li><code>__init__.py</code> should be empty</li>\n<li><code>common.py</code> (user preference on naming, example said \"common utilities\")</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">card_score</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n\t  <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The `card_score` function requires at least 2 cards.\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t  <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The input for `card_score` needs to be a string.\"</span><span class=\"token punctuation\">)</span>\n  numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> cards <span class=\"token keyword\">if</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">\"23456789\"</span><span class=\"token punctuation\">]</span>\n  faces <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>c <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> cards <span class=\"token keyword\">if</span> c <span class=\"token keyword\">in</span> <span class=\"token string\">\"JQK\"</span><span class=\"token punctuation\">]</span>\n  n_aces <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> cards <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  score <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>faces<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">while</span> n_aces <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t  score <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> score <span class=\"token operator\">+</span> <span class=\"token number\">11</span> <span class=\"token operator\">></span> <span class=\"token number\">21</span> <span class=\"token keyword\">else</span> <span class=\"token number\">11</span>\n\t  n_aces <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">return</span> score <span class=\"token keyword\">if</span> score <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">21</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span>\n</code></pre>\n<h5 id=\"tests\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tests\"></a>tests</h5>\n<ul>\n<li><code>__init__.py</code> should be empty</li>\n<li><code>test_blackjack.py</code></li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytest\n\n<span class=\"token keyword\">from</span> blackjack<span class=\"token punctuation\">.</span>common <span class=\"token keyword\">import</span> card_score\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>parametrize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cards,score\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'KKK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'AA'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'AK'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_simple_usecase</span><span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">assert</span> card_score<span class=\"token punctuation\">(</span>cards<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> score\n</code></pre>\n<ul>\n<li>To be able to work on the package in developer mode you'll need to run;\n<ul>\n<li><code>python setup.py develop</code></li>\n</ul>\n</li>\n<li>And from here you can safely run pytest again.</li>\n<li><code>pytest --verbose</code></li>\n<li><code>pytest-cov</code> for code coverage testing\n<ul>\n<li><code>python -m pip install pytest-cov</code></li>\n<li><a href=\"/DevLog/notes/g8jz1e99nnpbzc83mxv264r\">HTML</a> output: <code>pytest --cov blackjack --cov-report html</code></li>\n</ul>\n</li>\n<li><a href=\"https://calmcode.io/test/conftest.html\">Calm Code Conftest</a>\n<ul>\n<li>For greater code reusability and provide data to the testing suite, you can use <code>conftest.py</code> in the <code>tests</code> directory</li>\n<li>This allows you to repeat yourself less and have a single location that feeds data into the testing suite instead of making the data for each test individually.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> clumper <span class=\"token keyword\">import</span> Clumper <span class=\"token comment\"># our custom module</span>\n<span class=\"token keyword\">import</span> pytest\n\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>scope<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">base_clumper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t  <span class=\"token punctuation\">{</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">}</span>\n\t  <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> Clumper<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># So that tests like this:</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_headtail_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">:</span> i<span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  c <span class=\"token operator\">=</span> Clumper<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span>\n  <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span>\n\n<span class=\"token comment\"># can become like:</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_headtail_size</span><span class=\"token punctuation\">(</span>base_clumper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>base_clumper<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>base_clumper<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span>\n  <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>base_clumper<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span>\n  <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>base_clumper<span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}