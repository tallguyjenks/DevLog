{"pageProps":{"note":{"id":"ewtntfikqg9mwivim7ch84d","title":"Classes with Vectors","desc":"","updated":1641371959790,"created":1641371959790,"custom":{},"fname":"s.l.cpp.oop.classes-with-vectors","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"1a23dedf1342814c33a3fd8e5f78b225","links":[],"anchors":{"classes-with-vectors":{"type":"header","text":"Classes with vectors","value":"classes-with-vectors","line":9,"column":0,"depth":2},"example":{"type":"header","text":"Example","value":"example","line":11,"column":0,"depth":3}},"children":[],"parent":"md6b7x4ilth1yp2dh7ri0hz","data":{}},"body":"<h1 id=\"classes-with-vectors\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#classes-with-vectors\"></a>Classes with Vectors</h1>\n<h2 id=\"classes-with-vectors-1\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#classes-with-vectors-1\"></a>Classes with vectors</h2>\n<h3 id=\"example\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example\"></a>Example</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;string></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*** Seat class definition ***/</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Seat</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">Reserve</span><span class=\"token punctuation\">(</span>string resfirstName<span class=\"token punctuation\">,</span> string resLastName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resAmountPaid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">bool</span> <span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n   \n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n   string firstName<span class=\"token punctuation\">;</span>\n   string lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span>    amountPaid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Seat</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Reserve</span><span class=\"token punctuation\">(</span>string resfirstName<span class=\"token punctuation\">,</span> string resLastName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resAmountPaid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   firstName  <span class=\"token operator\">=</span> resfirstName<span class=\"token punctuation\">;</span>\n   lastName   <span class=\"token operator\">=</span> resLastName<span class=\"token punctuation\">;</span>\n   amountPaid <span class=\"token operator\">=</span> resAmountPaid<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Seat</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   firstName  <span class=\"token operator\">=</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">;</span>\n   lastName   <span class=\"token operator\">=</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">;</span>\n   amountPaid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">Seat</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">==</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Seat</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> firstName <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> lastName  <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Paid: \"</span>  <span class=\"token operator\">&#x3C;&#x3C;</span> amountPaid <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*** End definitions for Seat class ***/</span>\n\n\n<span class=\"token comment\">/*** Functions for vector of Seat objects ***/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeatsMakeEmpty</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span>Seat<span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> seats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> seats<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      seats<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">MakeEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeatsPrint</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span>Seat<span class=\"token operator\">></span> seats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> seats<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> i <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n      seats<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">SeatsCreateReservation</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span>Seat<span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> seats<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   string firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> amountPaid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seatNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   Seat seat<span class=\"token punctuation\">;</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter seat number (0..\"</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> seats<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"): \"</span><span class=\"token punctuation\">;</span>\n   cin  <span class=\"token operator\">>></span> seatNum<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seatNum <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>seats<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Seat number too large.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>seats<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>seatNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Seat already occupied.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter first name: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> firstName<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter last name: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> lastName<span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter amount paid: \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> amountPaid<span class=\"token punctuation\">;</span>\n      \n      seat<span class=\"token punctuation\">.</span><span class=\"token function\">Reserve</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">,</span> amountPaid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      seats<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>seatNum<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> seat<span class=\"token punctuation\">;</span>\n      \n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Completed.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*** End functions for vector of Seat objs ***/</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">char</span>   userKey <span class=\"token operator\">=</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n   vector<span class=\"token operator\">&#x3C;</span>Seat<span class=\"token operator\">></span> <span class=\"token function\">seats</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token function\">SeatsMakeEmpty</span><span class=\"token punctuation\">(</span>seats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>userKey <span class=\"token operator\">!=</span> <span class=\"token char\">'q'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> endl <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter command (p/r/q): \"</span><span class=\"token punctuation\">;</span>\n      cin <span class=\"token operator\">>></span> userKey<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userKey <span class=\"token operator\">==</span> <span class=\"token char\">'p'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Print seats</span>\n         <span class=\"token function\">SeatsPrint</span><span class=\"token punctuation\">(</span>seats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userKey <span class=\"token operator\">==</span> <span class=\"token char\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Reserve seat</span>\n         <span class=\"token function\">SeatsCreateReservation</span><span class=\"token punctuation\">(</span>seats<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userKey <span class=\"token operator\">==</span> <span class=\"token char\">'q'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Quit</span>\n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Quitting.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Invalid command.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}