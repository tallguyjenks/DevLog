{"pageProps":{"note":{"id":"u5rzc4zqg6bcp9gj46tzuti","title":"Text","desc":"","updated":1641377592259,"created":1641377592259,"custom":{},"fname":"s.l.cpp.streams.output-fotmatting.text","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"44cc7d81df20743a840a39574e8d83b5","links":[],"anchors":{"text-formatting":{"type":"header","text":"Text Formatting","value":"text-formatting","line":9,"column":0,"depth":4}},"children":[],"parent":"f9lkpcfdkk5p6aytqors5mc","data":{}},"body":"<h1 id=\"text\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#text\"></a>Text</h1>\n<h4 id=\"text-formatting\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#text-formatting\"></a>Text Formatting</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Manipulator</th><th align=\"left\">Description</th><th align=\"left\">Example (for item \"Amy\")</th><th></th></tr></thead><tbody><tr><td align=\"left\">setw(n)</td><td align=\"left\">Sets the number of characters for the next output item only (does not persist, in contrast to other manipulators). By default, the item will be right-aligned, and filled with spaces. From <code>&#x3C;iomanip></code></td><td align=\"left\">For n=7: \"Amy\"</td><td></td></tr><tr><td align=\"left\">setfill(c)</td><td align=\"left\">Sets the fill to character c. From <code>&#x3C;iomanip></code></td><td align=\"left\">For c='*': \"\"****Amy\"\"</td><td>\"</td></tr><tr><td align=\"left\">left</td><td align=\"left\">Changes to left alignment. From <code>&#x3C;ios></code></td><td align=\"left\">\"Amy \"</td><td></td></tr><tr><td align=\"left\">right</td><td align=\"left\">Changes to right alignment. From <code>&#x3C;ios></code></td><td align=\"left\">\" Amy\"</td><td></td></tr></tbody></table>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;ios></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iomanip></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Dog age in human years (dogyears.com)\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// set num char for each column, set alignment</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> left  <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Dog age\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> right <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Human age\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"------------------------------\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> left  <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"2 months\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> right <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"14 months\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> left  <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"6 months\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> right <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"5 years\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// set fill character, num char for each column, set alignment</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> left  <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"8 months\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> right <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"9 years\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> left  <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"1 year\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// change fill character, num char for each column, set alignment</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> right <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"15 years\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// change fill character, num char for each column</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>Of particular interest is how the <code>setw()</code> and <code>setfill()</code> manipulators are used in the last few lines. Note how they are used to create a line of 30 asterisks, without having to type 30 asterisks.\n.\nMost manipulators are persistent, meaning they change the state of the stream for all subsequent output. The exception is <code>setw()</code>, which <u>only affects the next output item</u>, defined that way likely because programmers usually only want to set the width of the next item and not all subsequent items.</p>\n</blockquote>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"center\">Manipulator</th><th align=\"left\">Description</th><th></th></tr></thead><tbody><tr><td align=\"center\"><code>endl</code></td><td align=\"left\">Inserts a newline character '\\n' into the output buffer, and informs the system to flush the buffer.</td><td>From <code>&#x3C;iostream></code></td></tr><tr><td align=\"center\"><code>flush</code></td><td align=\"left\">Informs the system to flush the buffer. From <code>&#x3C;iostream></code></td><td></td></tr></tbody></table>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}