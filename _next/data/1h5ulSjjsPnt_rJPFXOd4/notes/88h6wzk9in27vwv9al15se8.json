{"pageProps":{"note":{"id":"88h6wzk9in27vwv9al15se8","title":"Class Copy Constructor","desc":"","updated":1641372664248,"created":1641372639439,"custom":{},"fname":"s.l.cpp.oop.the-big-three.class-copy-constructor","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"f307883d42b4a82ed1986568e25db85d","links":[],"anchors":{"class-copy-constructors":{"type":"header","text":"Class Copy Constructors","value":"class-copy-constructors","line":9,"column":0,"depth":2}},"children":["0nxpjsum943hkzg8ey1zi90"],"parent":"ffnrav5lobaih2yq8jctpiv","data":{}},"body":"<h1 id=\"class-copy-constructor\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#class-copy-constructor\"></a>Class Copy Constructor</h1>\n<h2 id=\"class-copy-constructors\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#class-copy-constructors\"></a>Class Copy Constructors</h2>\n<p>If a class has a constructor that allocates memory for a variable with a pointer:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token operator\">~</span><span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Set member value dataObj</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">SetDataObj</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> setVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">*</span>dataObj <span class=\"token operator\">=</span> setVal<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token comment\">// Return member value dataObj</span>\n   <span class=\"token keyword\">int</span> <span class=\"token function\">GetDataObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>dataObj<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> dataObj<span class=\"token punctuation\">;</span><span class=\"token comment\">// Data member</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>And a new class is instantiated, and then passed by <strong>value</strong> to a function:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">SomeFunction</span><span class=\"token punctuation\">(</span>MyClass localObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// Do something with localObj</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   MyClass tempClassObj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Create object of type MyClass</span>\n   \n   <span class=\"token comment\">// Set and print data member value</span>\n   tempClassObj<span class=\"token punctuation\">.</span><span class=\"token function\">SetDataObj</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Before: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> tempClassObj<span class=\"token punctuation\">.</span><span class=\"token function\">GetDataObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Calls SomeFunction(), tempClassObj is passed by value</span>\n   <span class=\"token function\">SomeFunction</span><span class=\"token punctuation\">(</span>tempClassObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Print data member value</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"After: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> tempClassObj<span class=\"token punctuation\">.</span><span class=\"token function\">GetDataObj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ERROR</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>You get an error because the pass by value acts as a member wise copy.:</p>\n<ul>\n<li>newA = oldA</li>\n<li>newB = oldB</li>\n</ul>\n<p>If your class doesn't have pointers then you wont have this issue. But with pointers we need to take a special approach. We need a copy constructor so that when passed by value to a function, when the class is copied locally we don't mess with the pointers. This copy constructor creates a new copy of the original class called a <strong>deep copy</strong>. </p>\n<blockquote>\n<p>The <strong>copy constructor</strong> can be called with a single pass by reference argument of the class type, representing an original object to be copied to the newly-created object:</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n      <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> MyClass<span class=\"token operator\">&#x26;</span> origClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/*\n\tA class's copy constructor will be called automatically when an object of the class type \n\tis passed by value to a function, and also when an object is initialized by copying another \n\tobject during declaration, as in: \n*/</span>\nMyClass classObj2 <span class=\"token operator\">=</span> classObj1<span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// or </span>\nobj2Ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">MyClass</span><span class=\"token punctuation\">(</span>classObj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">.</span>\n</code></pre>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/DevLog/notes/0nxpjsum943hkzg8ey1zi90\">Implementation</a></li>\n</ol>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}