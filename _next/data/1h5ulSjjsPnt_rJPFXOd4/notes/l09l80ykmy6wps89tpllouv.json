{"pageProps":{"note":{"id":"l09l80ykmy6wps89tpllouv","title":"Vars","desc":"","updated":1641427406186,"created":1641427388172,"custom":{},"fname":"s.l.bash.vars","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"10115f7f850c554c4a1323f85638a05a","links":[{"from":{"fname":"s.l.bash.funcs","vaultName":"DevLog"},"type":"backlink","position":{"start":{"line":5,"column":3,"offset":28},"end":{"line":5,"column":20,"offset":45},"indent":[]},"value":"s.l.bash.vars","alias":"s.l.bash.vars"}],"anchors":{"variables":{"type":"header","text":"Variables","value":"variables","line":9,"column":0,"depth":3},"meta-characters-with-variables":{"type":"header","text":"Meta characters with variables","value":"meta-characters-with-variables","line":104,"column":0,"depth":4},"exporting-variables":{"type":"header","text":"Exporting variables","value":"exporting-variables","line":153,"column":0,"depth":4}},"children":[],"parent":"8a6f5aineqilpmdmkc3lked","data":{},"schema":{"schemaId":"np8756j6uwzlkg1n8hsejlu","moduleId":"s"}},"body":"<h1 id=\"vars\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#vars\"></a>Vars</h1>\n<h3 id=\"variables\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#variables\"></a>Variables</h3>\n<p>Variables in bash are assigned with a single <code>=</code>\nNo spacing between the variable name, the <code>=</code> and the assigned value\nYou can specify the variables scope with either <code>export</code> or <code>local</code> or\nan environmental variable with no explicit scope.</p>\n<p>Once declared in your script or environment etc, you can reference your\nvariables by matching the exact casing of the variable name and pre-pending\na <code>$</code> so my path variable for binaries to execute would be <code>$PATH</code>.</p>\n<p>When referencing your variables always quote them because of:\n\"General rule: quote it if it can either be empty or contain spaces\"\n\"<code>$?</code> doesn't need quotes since it's a numeric value.\"</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">## Variables</span>\n\n<span class=\"token comment\">### Local vars</span>\n<span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n\n<span class=\"token comment\">### Global Vars</span>\n<span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n\n<span class=\"token comment\">### Environment</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$var</span>\"</span>\n</code></pre>\n<p>\"In short, quote everything where you do not require the shell to perform token\nsplitting and wild card expansion.\"</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">\n<span class=\"token comment\">## Token Splitting</span>\n<span class=\"token assign-left variable\">words</span><span class=\"token operator\">=</span><span class=\"token string\">\"foo bar baz\"</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">word</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$words</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$word</span>\"</span>\n<span class=\"token keyword\">done</span>\n<span class=\"token comment\">#> foo</span>\n<span class=\"token comment\">#> bar</span>\n<span class=\"token comment\">#> baz</span>\n\n</code></pre>\n<p>Double quotes are suitable when variable interpolation is\nrequired. With suitable adaptations, it is also a good workaround when you need\nsingle quotes in the string. (There is no straightforward way to escape a\nsingle quote between single quotes, because there is no escape mechanism inside\nsingle quotes -- if there was, they would not quote completely verbatim.)</p>\n<p>No quotes are suitable when you specifically require the shell to perform token\nsplitting and/or wild card expansion.</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">## Wildcard Expansion</span>\n\n<span class=\"token comment\">### Literal Strings</span>\n<span class=\"token assign-left variable\">pattern</span><span class=\"token operator\">=</span><span class=\"token string\">'file*.txt'</span>\n<span class=\"token function\">ls</span> <span class=\"token variable\">$pattern</span>\n<span class=\"token comment\"># > file1.txt      file_other.txt</span>\n\n<span class=\"token comment\">### Double Quotes</span>\n<span class=\"token function\">ls</span> <span class=\"token string\">\"<span class=\"token variable\">$pattern</span>\"</span>\n<span class=\"token comment\">#> ls: cannot access file*.txt: No such file or directory</span>\n<span class=\"token comment\"># (There is no file named literally file*.txt.)</span>\n\n<span class=\"token function\">ls</span> <span class=\"token string\">'$pattern'</span>\n<span class=\"token comment\">#> ls: cannot access $pattern: No such file or directory</span>\n<span class=\"token comment\"># (There is no file named $pattern, either!)</span>\n</code></pre>\n<p>In more concrete terms, anything containing a filename should usually be quoted\n(because filenames can contain whitespace and other shell meta characters).\nAnything containing a URL should usually be quoted (because many URL's contain\nshell meta characters like <code>?</code> and <code>&#x26;</code>). Anything containing a regex should usually\nbe quoted (ditto ditto). Anything containing significant whitespace other than\nsingle spaces between non-whitespace characters needs to be quoted (because\notherwise, the shell will munge the whitespace into, effectively, single\nspaces, and trim any leading or trailing whitespace).</p>\n<p>When you know that a variable can only contain a value which contains no shell\nmeta characters, quoting is optional. Thus, an unquoted <code>$?</code> is basically fine,\nbecause this variable can only ever contain a single number. However, <code>\"$?\"</code> is\nalso correct, and recommended for general consistency and correctness (though\nthis is my personal recommendation, not a widely recognized policy).</p>\n<p>Values which are not variables basically follow the same rules, though you\ncould then also escape any meta characters instead of quoting them. For a common\nexample, a URL with a &#x26; in it will be parsed by the shell as a background\ncommand unless the meta character is escaped or quoted.</p>\n<h4 id=\"meta-characters-with-variables\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#meta-characters-with-variables\"></a>Meta characters with variables</h4>\n<p>The braces, in addition to delimiting a variable name are used for parameter expansion so you can do things like:</p>\n<p>Truncate the contents of a variable</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${var<span class=\"token operator\">%</span>d*}</span>\n<span class=\"token comment\">#> abc</span>\n</code></pre>\n<p>Make substitutions similar to sed</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${var<span class=\"token operator\">/</span>de<span class=\"token operator\">/</span>12}</span>\n<span class=\"token comment\">#> abc12</span>\n</code></pre>\n<p>Use a default value</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">default</span><span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">unset</span> var<span class=\"token punctuation\">;</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${var<span class=\"token operator\">:-</span>$default}</span>\n<span class=\"token comment\">#> hello</span>\n</code></pre>\n<p>and several more</p>\n<p>Also, brace expansions create lists of strings which are typically iterated over in loops:</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> f<span class=\"token punctuation\">{</span>oo,ee,a<span class=\"token punctuation\">}</span>d\n<span class=\"token comment\">#> food feed fad</span>\n\n<span class=\"token function\">mv</span> error.log<span class=\"token punctuation\">{</span>,.OLD<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># (error.log is renamed to error.log.OLD because the brace expression</span>\n<span class=\"token comment\"># expands to \"mv error.log error.log.OLD\")</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">num</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span>000<span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$num</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n<span class=\"token comment\">#> 000</span>\n<span class=\"token comment\">#> 001</span>\n<span class=\"token comment\">#> 002</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span>00<span class=\"token punctuation\">..</span><span class=\"token number\">8</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#> 00 02 04 06 08</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span>D<span class=\"token punctuation\">..</span>T<span class=\"token punctuation\">..</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">#> D H L P T</span>\n</code></pre>\n<h4 id=\"exporting-variables\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#exporting-variables\"></a>Exporting variables</h4>\n<p>Export variables for other programs to use in your shell environment with</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>myvar\n</code></pre>\n<p>variable with</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">unset</span> myvar\n</code></pre>\n<p>Export copies variables to the environment, <code>declare -x</code> also does the same as export?</p>\n<p>Export functions with</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">export</span> -f myfunc\n</code></pre>\n<p>Just printing export will list all current environment variables</p>\n<p>Functions don’t get a copy of the variables in the environment, they share them and therefor can mutate them</p>\n<p>To see built-ins use</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">enable</span>\n</code></pre>\n<p>To see keywords use</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">compgen -k\n</code></pre>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/DevLog/notes/31nnsx6afp48kj8yh318w57\">Funcs (DevLog)</a></li>\n</ul>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}