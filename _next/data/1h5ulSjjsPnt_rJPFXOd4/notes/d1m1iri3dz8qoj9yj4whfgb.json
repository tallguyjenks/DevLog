{"pageProps":{"note":{"id":"d1m1iri3dz8qoj9yj4whfgb","title":"Loops","desc":"","updated":1641429090665,"created":1641429069599,"custom":{},"fname":"s.l.bash.flow.loops","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"6ff6513fc4ee700ef1607f8fef8fca0d","links":[],"anchors":{"loops-in-bash":{"type":"header","text":"Loops In Bash","value":"loops-in-bash","line":9,"column":0,"depth":5}},"children":["oa7v4lr3uj2hsy8z492c7fp"],"parent":"6nt8yrefnzgmg7scmlp355k","data":{}},"body":"<h1 id=\"loops\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops\"></a>Loops</h1>\n<h5 id=\"loops-in-bash\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#loops-in-bash\"></a>Loops In Bash</h5>\n<ul>\n<li>For looping over all positional arguments / words sent to the command you can use the following:</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">arg</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span>\n<span class=\"token comment\"># Or simply:</span>\n<span class=\"token keyword\">for</span> arg\n</code></pre>\n<ul>\n<li>Since looping over the positional parameters is such a common thing to do in\nscripts, for arg defaults to for arg in <code>\"$@\"</code>. The double-quoted <code>\"$@\"</code> is\nspecial magic that causes each parameter to be used as a single word (or a\nsingle loop iteration). It's what you should be using at least 99% of the time.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Correct version</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">x</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"parameter: '<span class=\"token variable\">$x</span>'\"</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># or better:</span>\n\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">do</span>\n\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"parameter: '<span class=\"token variable\">$x</span>'\"</span>\n<span class=\"token keyword\">done</span>\n\n$ ./myscript <span class=\"token string\">'arg 1'</span> arg2 arg3\n\n<span class=\"token comment\">#> parameter: 'arg 1'</span>\n<span class=\"token comment\">#> parameter: 'arg2'</span>\n<span class=\"token comment\">#> parameter: 'arg3'</span>\n</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">[</span>command list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span>\n</code></pre>\n<ul>\n<li>This constitutes the actual loop that is used by the next few commands.\nThe list of commands between the do and done are the commands that will be executed in every iteration of the loop.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>words<span class=\"token punctuation\">]</span>\n</code></pre>\n<ul>\n<li>The next loop will iterate over each WORD after the in keyword.\nThe loop's commands will be executed with the value of the variable denoted by name set to the word.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> [arithmetic expression]<span class=\"token punctuation\">;</span> [arithmetic expression]<span class=\"token punctuation\">;</span> [arithmetic expression] <span class=\"token punctuation\">))</span></span>\n</code></pre>\n<ul>\n<li>The next loop will run as long as the second arithmetic expression remains true.\nThe first arithmetic expression will be run before the loop starts. The third arithmetic expression will be run after the last command in each iteration has been executed.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span>command list<span class=\"token punctuation\">]</span>\n</code></pre>\n<ul>\n<li>The next loop will be repeated for as long as the last command ran in the command list exits successfully.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">until</span> <span class=\"token punctuation\">[</span>command list<span class=\"token punctuation\">]</span>\n</code></pre>\n<ul>\n<li>The next loop will be repeated for as long as the last command ran in the command list exits unsuccessfully (\"fails\").</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>words<span class=\"token punctuation\">]</span>\n</code></pre>\n<ul>\n<li>The next loop will repeat forever, letting the user choose between the given words.</li>\n<li>The iteration's commands are executed with the variable denoted by name's value set to the word chosen by the user. Naturally, you can use break to end this loop.</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/DevLog/notes/oa7v4lr3uj2hsy8z492c7fp\">For</a></li>\n</ol>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}