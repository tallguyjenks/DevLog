{"pageProps":{"note":{"id":"25fxljodd1fu75liitl5u3t","title":"Stream Errors","desc":"","updated":1641373094109,"created":1641373075269,"custom":{},"fname":"s.l.cpp.files.stream-errors","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"de6c74ee384f0126dc594d77bc480b73","links":[],"anchors":{"stream-errors":{"type":"header","text":"Stream Errors","value":"stream-errors","line":9,"column":0,"depth":3}},"children":[],"parent":"fmdaknvnfoz0e7w9uhdo2yf","data":{}},"body":"<h1 id=\"stream-errors\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stream-errors\"></a>Stream Errors</h1>\n<h3 id=\"stream-errors-1\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stream-errors-1\"></a>Stream Errors</h3>\n<blockquote>\n<p>A <strong>stream error</strong> occurs when insertion or extraction fails, causing the stream to enter an error state.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Initial value -1 for demo purposes.</span>\n   <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter a number: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cin  <span class=\"token operator\">>></span> num1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stream error state entered here.</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter a second number:\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cin  <span class=\"token operator\">>></span> num2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stream already in error state, so extraction skipped.</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num1: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> num1 <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"num2: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> num2 <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\tEnter a number:\n\tsix\n\tEnter a second number:\n\tnum1: 0\n\tnum2: -1\n*/</span>\n\n</code></pre>\n<blockquote>\n<p>A stream's error state can be checked with a function. Ex: <code>cin.good() </code>returns true if <code>cin</code> is not in an error state. Otherwise, false is returned. A stream internally uses several 1-bit error flags to track the state of the stream.</p>\n</blockquote>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Flag</th><th align=\"left\">Meaning</th><th align=\"left\">Function</th></tr></thead><tbody><tr><td align=\"left\"><code>goodbit</code></td><td align=\"left\">Indicates no error flags are set and the stream is good.</td><td align=\"left\"><code>good()</code> returns true if no stream errors have occurred.</td></tr><tr><td align=\"left\"><code>eofbit</code></td><td align=\"left\">Indicates if end-of-file reached on extraction.</td><td align=\"left\"><code>eof()</code> returns value of eofbit, if end-of-file reached on extraction.</td></tr><tr><td align=\"left\"><code>failbit</code></td><td align=\"left\">Indicates a logical error for the previous extraction or insertion operation.</td><td align=\"left\"><code>fail()</code> returns true if either failbit or badbit is set, indicating an error for the previous stream operation.</td></tr><tr><td align=\"left\"><code>badbit</code></td><td align=\"left\">Indicates an error occurred reading or writing the stream, and the stream is bad. Further operations on the stream will fail.</td><td align=\"left\"><code>bad()</code> returns true if badbit is set, indicating the stream is bad.</td></tr></tbody></table>\n<blockquote>\n<p>A stream's error state is cleared using <code>clear()</code>. Ex: <code>cin.clear()</code> clears the error state from <code>cin</code>.\n.\nThe function <code>ignore(maxToIgnore, stopChar)</code> ignores characters in the stream buffer. Ex: <code>cin.ignore(10, '\\n') </code>ignores up to 10 characters in the stream buffer, or until a '<code>\\n</code>' character is encountered.\n.\nCommonly, a program needs to wait until a '<code>\\n</code>' character is found, in which case set <code>maxToIgnore</code> to the maximum size of a stream: <code>numeric_limits&#x3C;streamsize>::max()</code>.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Read user input until a number is entered</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;limits></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter a number: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cin <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Clear error state</span>\n      cin<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Ignore characters in stream until newline</span>\n      cin<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">numeric_limits</span><span class=\"token operator\">&#x3C;</span>streamsize<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Try again: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      cin  <span class=\"token operator\">>></span> number<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"You entered: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> number <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>A program may need to check for errors during file reading.\nOne approach is to check whether end-of-file was reached after the file reading ends. If end-of-file was not reached, then an error in file reading occurred.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">/* Given:\n\tmyfile.txt:\n\t5\n\t8\n\tsix\n\t4\n\t6\n*/</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;fstream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   ifstream inFS<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> fileNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Number in file</span>\n   \n   inFS<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myfile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inFS<span class=\"token punctuation\">.</span><span class=\"token function\">is_open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Could not open file myfile.txt.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token comment\">// Read file until end-of-file or an error</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>inFS<span class=\"token punctuation\">.</span><span class=\"token function\">good</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       inFS <span class=\"token operator\">>></span> fileNumber<span class=\"token punctuation\">;</span>\n       cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"File number: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> fileNumber <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token comment\">// If end-of-file not reached, then an error occurred</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inFS<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Error reading myfile.txt\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   inFS<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\tFile number: 5\n\tFile number: 8\n\tFile number: 0\n\tError reading myfile.txt\n*/</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}