{"pageProps":{"note":{"id":"90vljdk341a5v38boq6iyv3","title":"Using Hashbytes to Compare Character Strings","desc":"","updated":1646693788211,"created":1646693436504,"custom":{},"fname":"s.q.tsql.tips-tricks.using-hashbytes-to-compare-character-strings","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"7e0c5f887b2bedfb2fc8f356a7f35b7e","links":[],"anchors":{"using-pipe-to-hash-multiple-columns-for-matching":{"type":"header","text":"Using Pipe To Hash Multiple Columns For Matching","value":"using-pipe-to-hash-multiple-columns-for-matching","line":50,"column":0,"depth":2}},"children":[],"parent":"8zi5l8v14vld0duayretzxl","data":{}},"body":"<h1 id=\"using-hashbytes-to-compare-character-strings\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#using-hashbytes-to-compare-character-strings\"></a>Using Hashbytes to Compare Character Strings</h1>\n<blockquote>\n<p>If you have to compare string values on a regular basis, and especially if you have to compare more than one column at a time, instead of comparing the columns directly, hash the columns first. Hashing creates a string based on the encryption algorithm you select. You can pass in concatenated string values. The ultimate benefit is that all the algorithms generate a value that is a set number of characters. This comes in handy for storing this value when it comes time for loading junk dimensions into data warehouses.\nYou cannot use <code>HASHBYTES()</code> on <code>NVARCHAR(MAX)</code> in SQL Server. <code>HASHBYTES</code> has a 4,000-character limit for <code>NVARCHAR</code>. Technically, you can get around this programmatically, but if your data is longer than 4,000 characters, Iâ€™d suggest looking for another way to identify the record.</p>\n<p>-- <a href=\"https://tutorials.massstreet.net/v/transact-sql/solutions-to-real-world-problems/lesson-63.-using-hashbytes-to-compare-character-strings\">https://tutorials.massstreet.net/v/transact-sql/solutions-to-real-world-problems/lesson-63.-using-hashbytes-to-compare-character-strings</a></p>\n</blockquote>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@Statement1</span> NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@Statement2</span> NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@Statement1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Army And Navy Play For Second'</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@Statement2</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Rock Chalk Jayhawk'</span>\n\n<span class=\"token keyword\">PRINT</span> <span class=\"token function\">LEN</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@Statement1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">PRINT</span> <span class=\"token function\">LEN</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@Statement2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">PRINT</span> HASHBYTES<span class=\"token punctuation\">(</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@Statement1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">PRINT</span> HASHBYTES<span class=\"token punctuation\">(</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@Statement2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">PRINT</span> <span class=\"token function\">LEN</span><span class=\"token punctuation\">(</span>HASHBYTES<span class=\"token punctuation\">(</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@Statement1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">PRINT</span> <span class=\"token function\">LEN</span><span class=\"token punctuation\">(</span>HASHBYTES<span class=\"token punctuation\">(</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@Statement2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- 29</span>\n<span class=\"token comment\">-- 18</span>\n<span class=\"token comment\">-- 0x9A6A731EB1D5FE8F3B93A576A9740E3E</span>\n<span class=\"token comment\">-- 0xFDEFE8D5B2FF212060E733A0A01A1A7F</span>\n<span class=\"token comment\">-- 16</span>\n<span class=\"token comment\">-- 16</span>\n</code></pre>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@Statement1</span> NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@Statement2</span> NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@Statement1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'WalMart'</span>\n<span class=\"token keyword\">SET</span> <span class=\"token variable\">@Statement2</span> <span class=\"token operator\">=</span> <span class=\"token string\">'walmart'</span>\n\n\n<span class=\"token keyword\">PRINT</span> HASHBYTES<span class=\"token punctuation\">(</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@Statement1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">--0xDE2E98EE55B1B249B711300DE7047C75</span>\n<span class=\"token keyword\">PRINT</span> HASHBYTES<span class=\"token punctuation\">(</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@Statement2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">--0xC48604C9A656E09D87E99B820499D430</span>\n</code></pre>\n<h2 id=\"using-pipe-to-hash-multiple-columns-for-matching\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#using-pipe-to-hash-multiple-columns-for-matching\"></a>Using Pipe To Hash Multiple Columns For Matching</h2>\n<p><a href=\"https://tutorials.massstreet.net/v/transact-sql/solutions-to-real-world-problems/lesson-64.-using-pipe-to-hash-multiple-columns-for-matching\">https://tutorials.massstreet.net/v/transact-sql/solutions-to-real-world-problems/lesson-64.-using-pipe-to-hash-multiple-columns-for-matching</a></p>\n<blockquote>\n<p>When using the <code>HASHBYTES()</code> function in SQL Server to hash multiple columns for matching, use <code>CONCAT()</code> and separate values with a pipe.\nUsually, the values in columns are disparate enough that you really do not have to worry. For example, it was years before I actually discovered an edge case. However, I did discover at least one scenario where concatenating the columns was not enough to develop a unique record. This occurred in a table with few columns and small amounts of data.\nA better approach is to just <code>CONCAT()</code> columns with a pipe between values. Since this character is rarely used, it lowers the probability of having different values hash the same.</p>\n</blockquote>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@SampleStageTable</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>ID <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> VALUE1 NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> VALUE2 NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@SampleStageTable</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span> VALUE1<span class=\"token punctuation\">,</span> VALUE2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'012'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'345'</span>\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2345'</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token variable\">@SampleStageTable</span>\n<span class=\"token comment\">-------------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@SampleStageTable</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>ID <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> VALUE1 NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> VALUE2 NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@SampleStageTable</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span> VALUE1<span class=\"token punctuation\">,</span> VALUE2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'012'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'345'</span>\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2345'</span>\n\n\n<span class=\"token keyword\">SELECT</span> ID<span class=\"token punctuation\">,</span> VALUE1<span class=\"token punctuation\">,</span> VALUE2<span class=\"token punctuation\">,</span> HASHBYTES<span class=\"token punctuation\">(</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">,</span> CONCAT<span class=\"token punctuation\">(</span>VALUE1<span class=\"token punctuation\">,</span> VALUE2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ROWHASH\n<span class=\"token keyword\">FROM</span> <span class=\"token variable\">@SampleStageTable</span>\n</code></pre>\n<p>So separate columns with a <code>|</code></p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DECLARE</span> <span class=\"token variable\">@SampleStageTable</span> <span class=\"token keyword\">AS</span> <span class=\"token keyword\">TABLE</span><span class=\"token punctuation\">(</span>ID <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> VALUE1 NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> VALUE2 NVARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token variable\">@SampleStageTable</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">,</span> VALUE1<span class=\"token punctuation\">,</span> VALUE2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'012'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'345'</span>\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'01'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2345'</span>\n\n\n<span class=\"token keyword\">SELECT</span> ID<span class=\"token punctuation\">,</span> VALUE1<span class=\"token punctuation\">,</span> VALUE2<span class=\"token punctuation\">,</span> HASHBYTES<span class=\"token punctuation\">(</span><span class=\"token string\">'MD5'</span><span class=\"token punctuation\">,</span> CONCAT<span class=\"token punctuation\">(</span>VALUE1<span class=\"token punctuation\">,</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> VALUE2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ROWHASH\n<span class=\"token keyword\">FROM</span> <span class=\"token variable\">@SampleStageTable</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}