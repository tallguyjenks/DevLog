{"pageProps":{"note":{"id":"6hyekrag8qnk5fv714cgysy","title":"Arrays and Vectors","desc":"","updated":1641371575517,"created":1641105063886,"stub":false,"isDir":false,"custom":{"stub":false,"isDir":false},"fname":"s.l.cpp.data-s.arrays-and-vectors","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"83181820f25f0341d22e1aaf2058cb30","links":[{"type":"wiki","from":{"fname":"s.l.cpp.data-s.arrays-and-vectors","id":"6hyekrag8qnk5fv714cgysy","vaultName":"DevLog"},"value":"c++-for-loops","alias":"C++ For Loops","position":{"start":{"line":25,"column":7,"offset":550},"end":{"line":25,"column":38,"offset":581},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"c++-for-loops"}}],"anchors":{"vectors-are-array":{"type":"header","text":"Vectors are Array++","value":"vectors-are-array","line":11,"column":0,"depth":2},"iterating-through-a-vector":{"type":"header","text":"Iterating Through a Vector","value":"iterating-through-a-vector","line":31,"column":0,"depth":3},"reversing-a-vector":{"type":"header","text":"Reversing a vector","value":"reversing-a-vector","line":77,"column":0,"depth":3}},"children":[],"parent":"a3ctjzke0uhql49gi6x57mn","data":{}},"body":"<h1 id=\"arrays-and-vectors\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#arrays-and-vectors\"></a>Arrays and Vectors</h1>\n<h2 id=\"vectors-are-array\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#vectors-are-array\"></a>Vectors are Array++</h2>\n<p>A vector is an ordered list of items of a given data type. </p>\n<p>Each item in a vector is called an <strong>element</strong>.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;vector></span></span>\n<span class=\"token comment\">// vector&#x3C;dataType> identifier(numElements);</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">myVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// an integer vector with 5 elements</span>\n<span class=\"token comment\">/*\n\tThough if you assign a vector a size of 5 the true size is still using the 0..n array indexing. so if you say:\n*/</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">myVector</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n\tand then try to access element 5:\n*/</span>\nmyVector<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#x3C;-- ERROR! 5 elements at index 0..4</span>\n</code></pre>\n<h3 id=\"iterating-through-a-vector\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iterating-through-a-vector\"></a>Iterating Through a Vector</h3>\n<p>Using <a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">C++ For Loops (Private)</a> on a vector can be a little irritating at first with the  size declaration but usage of array indexing:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// These give a variable to reference the size of the vector</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NUM_ELEMENTS <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">userVals</span><span class=\"token punctuation\">(</span>NUM_ELEMENTS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// test case</span>\nuserVals<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nuserVals<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\nuserVals<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\twhere i &#x3C; NUM_ELEMENTS is to say it quits if it is larger than 2\n\ti.e. 3. NUM_ELEMENTS goes up to 3, but because of the array indexing\n\tthe true values are 0, 1, &#x26; 2 as shown above in the test case\n*/</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> NUM_ELEMENTS<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&#x3C;&#x3C;</span> userVals<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//#> 2, 7, 4</span>\n</code></pre>\n<p>An even easier way of doing the same thing without an unnecessary <code>const</code> variable is to use <code>.size()</code></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">userVals</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// test case</span>\nuserVals<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nuserVals<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\nuserVals<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n\tthe size is 3 so if i &#x3C; 3 which is what the prior example also showed\n*/</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> userVals<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&#x3C;&#x3C;</span> userVals<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//#> 2, 7, 4</span>\n</code></pre>\n<h3 id=\"reversing-a-vector\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reversing-a-vector\"></a>Reversing a vector</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> NUM_ELEMENTS <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Number of elements</span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">revVctr</span><span class=\"token punctuation\">(</span>NUM_ELEMENTS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// User values</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// Loop index</span>\n<span class=\"token keyword\">int</span> tmpValue<span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// Placeholder</span>\n\n<span class=\"token comment\">// User populates the vector</span>\ncout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> NUM_ELEMENTS <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" integer values...\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Value: \"</span><span class=\"token punctuation\">;</span>\n  cin <span class=\"token operator\">>></span> revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Reverse the vector (this doesnt take into account an odd # of vals)</span>\n<span class=\"token comment\">// Size returns the amount of values in a vector, the exact number of</span>\n<span class=\"token comment\">// indexes is really -1 but to rever a vector we really only need to</span>\n<span class=\"token comment\">// pivot around a mid point or in this case a middle value or half of</span>\n<span class=\"token comment\">// the vector's size hence .size() / 2 below</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token punctuation\">(</span>revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// temp value holds the values one by one starting from the left i=1</span>\n  tmpValue <span class=\"token operator\">=</span> revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token comment\">// .size() - 1 as that is the true last index of the vector and -i</span>\n  <span class=\"token comment\">// so we can begin to move towards the center values right to left</span>\n  <span class=\"token comment\">// i starts off at 0 so the first iteration is in reality swapping</span>\n  <span class=\"token comment\">// the first and last elements of a vector</span>\n  revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Referring again to the true last element of the vector receiving </span>\n  <span class=\"token comment\">// the true last index of the vector receiving the value of the first </span>\n  <span class=\"token comment\">// this is the end of the swap</span>\n  revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>revVctr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tmpValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}