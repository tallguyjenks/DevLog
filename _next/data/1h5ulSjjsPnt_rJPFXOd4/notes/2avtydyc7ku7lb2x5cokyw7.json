{"pageProps":{"note":{"id":"2avtydyc7ku7lb2x5cokyw7","title":"Operator Overloading","desc":"","updated":1641372004425,"created":1641372004425,"custom":{},"fname":"s.l.cpp.oop.operator-overloading","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"e17bb51065d2a011289ae17672157684","links":[{"type":"wiki","from":{"fname":"s.l.cpp.oop.operator-overloading","id":"2avtydyc7ku7lb2x5cokyw7","vaultName":"DevLog"},"value":"s.l.cpp.polymorphism","alias":"s.l.cpp.polymorphism","position":{"start":{"line":7,"column":3,"offset":39},"end":{"line":7,"column":27,"offset":63},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"s.l.cpp.polymorphism"}}],"anchors":{"operator-overloading":{"type":"header","text":"Operator Overloading","value":"operator-overloading","line":9,"column":0,"depth":2}},"children":[],"parent":"md6b7x4ilth1yp2dh7ri0hz","data":{}},"body":"<h1 id=\"operator-overloading\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#operator-overloading\"></a>Operator Overloading</h1>\n<h2 id=\"operator-overloading-1\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#operator-overloading-1\"></a>Operator Overloading</h2>\n<p>Related:</p>\n<ul>\n<li><a href=\"/DevLog/notes/nyazw5tr3g14gl5sfztv4et\">Polymorphism</a></li>\n</ul>\n<p>If you have 2 integers and you add them with <code>+</code> then you used the <code>+</code> operator. If you want to add 2 private data members that are part of a class that are comprised of multiple parts, the <code>+</code> operator is not able to handle this unless we overload it:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">TimeHrMn <span class=\"token function\">time1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTimeHrMn <span class=\"token function\">time2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTimeHrMn timeTot<span class=\"token punctuation\">;</span>\n\ntimeTot <span class=\"token operator\">=</span> time1 <span class=\"token operator\">+</span> time2<span class=\"token punctuation\">;</span>\ntimeTot<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//#> H:5, M:72</span>\n</code></pre>\n<blockquote>\n<p>The + operator was somehow redefined to add TimeHrMn objects' hours and minutes fields separately (3 + 2 is 5, 22 + 50 is 72), leading to simple readable code.\n.\nAlthough <code>+</code> requires left and right operands as in <code>time1 + time2</code>, the member function only requires the <u>right operand</u> (rhs: right-hand-side) as the parameter, <u>because the left operand is the calling object</u>. In other words, <code>time1 + time2</code> is equivalent to the function call <code>time1.operator+(time2)</code>, which is valid syntax but almost never used.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeHrMn</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   <span class=\"token function\">TimeHrMn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeHours <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeMinutes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n   TimeHrMn <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>TimeHrMn rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Overloaded `+` operator</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">int</span> hours<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> minutes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Overload + operator for TimeHrMn</span>\nTimeHrMn TimeHrMn<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>TimeHrMn rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Definition of overload</span>\n   TimeHrMn timeTotal<span class=\"token punctuation\">;</span>\n   \n   timeTotal<span class=\"token punctuation\">.</span>hours   <span class=\"token operator\">=</span> hours   <span class=\"token operator\">+</span> rhs<span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">;</span>\n   timeTotal<span class=\"token punctuation\">.</span>minutes <span class=\"token operator\">=</span> minutes <span class=\"token operator\">+</span> rhs<span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> timeTotal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">TimeHrMn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TimeHrMn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeHours<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeMinutes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   hours  <span class=\"token operator\">=</span> timeHours<span class=\"token punctuation\">;</span>\n   minutes <span class=\"token operator\">=</span> timeMinutes<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">TimeHrMn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"H:\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> hours <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"M:\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> minutes <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   TimeHrMn <span class=\"token function\">time1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   TimeHrMn <span class=\"token function\">time2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   TimeHrMn timeTot<span class=\"token punctuation\">;</span>\n   \n   timeTot <span class=\"token operator\">=</span> time1 <span class=\"token operator\">+</span> time2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Implementation of overloaded operator</span>\n   timeTot<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>When an operator like <code>+</code> has been overloaded, the compiler determines which <code>+</code> operation to invoke based on the operand types. In <code>4 + 9</code>, the compiler sees two integer operands and thus applies the built-in <code>+</code> operation. In <code>time1 + time2</code>, where <code>time1</code> and <code>time2</code> are <code>TimeHrMn</code> objects, the compiler sees two <code>TimeHrMn</code> operands and thus invokes the programmer-defined function.\n.\nA programmer can define several functions that overload the same operator, as long as each involves different types so that the compiler can determine which to invoke.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeHrMn</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   <span class=\"token function\">TimeHrMn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeHours <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeMinutes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n   TimeHrMn <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>TimeHrMn rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   TimeHrMn <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rhsHours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">int</span> hours<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> minutes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Operands: TimeHrMn, TimeHrMn. Call this \"A\"</span>\nTimeHrMn TimeHrMn<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>TimeHrMn rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   TimeHrMn timeTotal<span class=\"token punctuation\">;</span>\n   \n   timeTotal<span class=\"token punctuation\">.</span>hours   <span class=\"token operator\">=</span> hours   <span class=\"token operator\">+</span> rhs<span class=\"token punctuation\">.</span>hours<span class=\"token punctuation\">;</span>\n   timeTotal<span class=\"token punctuation\">.</span>minutes <span class=\"token operator\">=</span> minutes <span class=\"token operator\">+</span> rhs<span class=\"token punctuation\">.</span>minutes<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> timeTotal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Operands: TimeHrMn, int. Call this \"B\"</span>\nTimeHrMn TimeHrMn<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rhsHours<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   TimeHrMn timeTotal<span class=\"token punctuation\">;</span>\n   \n   timeTotal<span class=\"token punctuation\">.</span>hours <span class=\"token operator\">=</span> hours <span class=\"token operator\">+</span> rhsHours<span class=\"token punctuation\">;</span>\n   timeTotal<span class=\"token punctuation\">.</span>minutes <span class=\"token operator\">=</span> minutes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stays same</span>\n   \n   <span class=\"token keyword\">return</span> timeTotal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">TimeHrMn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">TimeHrMn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeHours<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeMinutes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   hours  <span class=\"token operator\">=</span> timeHours<span class=\"token punctuation\">;</span>\n   minutes <span class=\"token operator\">=</span> timeMinutes<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">TimeHrMn</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"H:\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> hours <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"M:\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> minutes <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   TimeHrMn <span class=\"token function\">time1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   TimeHrMn <span class=\"token function\">time2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   TimeHrMn timeTot<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">91</span><span class=\"token punctuation\">;</span>\n   \n   timeTot <span class=\"token operator\">=</span> time1 <span class=\"token operator\">+</span> time2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Invokes \"A\"</span>\n   timeTot<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   timeTot <span class=\"token operator\">=</span> time1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Invokes \"B\"</span>\n   timeTot<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> num <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Invokes built-in add</span>\n   \n   <span class=\"token comment\">// timeTot = 10 + time1; // ERROR: No (int, TimeHrMn)</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}