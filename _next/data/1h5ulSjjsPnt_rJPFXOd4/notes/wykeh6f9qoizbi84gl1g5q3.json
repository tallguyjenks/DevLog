{"pageProps":{"note":{"id":"wykeh6f9qoizbi84gl1g5q3","title":"Number","desc":"","updated":1641377584460,"created":1641377584460,"custom":{},"fname":"s.l.cpp.streams.output-fotmatting.number","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"c4adfbd061db8704dab1954e10864b66","links":[],"anchors":{"number-formatting":{"type":"header","text":"Number Formatting","value":"number-formatting","line":9,"column":0,"depth":4}},"children":[],"parent":"f9lkpcfdkk5p6aytqors5mc","data":{}},"body":"<h1 id=\"number\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#number\"></a>Number</h1>\n<h4 id=\"number-formatting\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#number-formatting\"></a>Number Formatting</h4>\n<blockquote>\n<p>A programmer can adjust the way that output appears, a task known as output formatting. The main formatting approach uses manipulators. A manipulator is an item designed to be used with the insertion operator <code>&#x3C;&#x3C;</code> or extraction operator <code>>></code> to adjust the way output appears, and is available via <code>#include &#x3C;iomanip>; </code>or <code>#include &#x3C;ios>;</code> in namespace std. For example, <code>cout &#x3C;&#x3C; setprecision(3) &#x3C;&#x3C; myFloat;</code> causes the floating-point variable <code>myFloat</code> to be output with only 3 digits; if <code>myFloat</code> was 12.34, the output would be 12.3.\n.\n<u>Most manipulators change the state of the stream such that the manipulation affects all subsequent output, not just the next output.</u></p>\n</blockquote>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">Manipulator</th><th align=\"left\">Description</th><th align=\"left\">Example</th></tr></thead><tbody><tr><td align=\"left\">fixed</td><td align=\"left\">Use fixed-point notation. <code>From &#x3C;ios></code></td><td align=\"left\">12.34</td></tr><tr><td align=\"left\">scientific</td><td align=\"left\">Use scientific notation. <code>From &#x3C;ios></code></td><td align=\"left\">12.3E+01</td></tr><tr><td align=\"left\">setprecision(p)</td><td align=\"left\">If stream has not been manipulated to fixed or scientific: Sets max number of digits in number</td><td align=\"left\">p=3 yields 12.3 p=5 yields 12.34</td></tr><tr><td align=\"left\"></td><td align=\"left\">If stream has been manipulated to fixed or scientific: Sets max number of digits in fraction only (after the decimal point). From <code>&#x3C;iomanip></code></td><td align=\"left\">fixed: p=1 yields 12.3 scientific: p=1 yields 1.2e+01</td></tr><tr><td align=\"left\">showpoint</td><td align=\"left\">Even if fraction is 0, show decimal point and trailing 0s. Opposite is noshowpoint. <code>From &#x3C;ios></code></td><td align=\"left\">For 99.0 with precision=2 and fixed: 99 (default or noshowpoint) 99.00 (showpoint)</td></tr></tbody></table>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;ios></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iomanip></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   \n   <span class=\"token keyword\">double</span> milesTrvld <span class=\"token operator\">=</span> <span class=\"token number\">765.4321</span><span class=\"token punctuation\">;</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"setprecision(p) -- Sets # digits\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> milesTrvld <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" (default p is 6)\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> milesTrvld <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" (p = 8)\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> milesTrvld <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" (p = 5)\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> milesTrvld <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" (p = 2)\"</span>\n        <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" (note rounding)\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> milesTrvld <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" (manipulator persists)\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"(For following, p = 2 applies to fraction only)\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// fixed -- uses fixed point notation</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> fixed<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"fixed: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> milesTrvld <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// scientific -- uses scientific notation</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> scientific<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"scientific: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> milesTrvld <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}