{"pageProps":{"note":{"id":"u5nprzpdz2wu6ios7pnneam","title":"String","desc":"","updated":1641377621261,"created":1641377621262,"custom":{},"fname":"s.l.cpp.streams.string","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"e7d68a9980c698bbc37a8a6756732fef","links":[],"anchors":{"string-streams":{"type":"header","text":"String Streams","value":"string-streams","line":9,"column":0,"depth":3},"input-stream":{"type":"header","text":"Input Stream","value":"input-stream","line":11,"column":0,"depth":4},"output-stream":{"type":"header","text":"Output Stream","value":"output-stream","line":118,"column":0,"depth":4}},"children":[],"parent":"q4a2jfvzx2wrd6evvnfx4fa","data":{}},"body":"<h1 id=\"string\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#string\"></a>String</h1>\n<h3 id=\"string-streams\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#string-streams\"></a>String Streams</h3>\n<h4 id=\"input-stream\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#input-stream\"></a>Input Stream</h4>\n<blockquote>\n<p>Sometimes a programmer wishes to read input data from a string rather than from the keyboard (standard input). A new input string stream variable of type <code>istringstream</code> can be created that is associated with a string rather than with the keyboard (standard input). <code>istringstream</code> is derived from <code>istream</code>. Such a stream can be used just like the <code>cin</code> stream. The following program illustrates.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;sstream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;string></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   string  userInfo <span class=\"token operator\">=</span> <span class=\"token string\">\"Amy Smith 19\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Input string</span>\n   istringstream <span class=\"token function\">inSS</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Input string stream</span>\n   string firstName<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// First name</span>\n   string lastName<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// Last name</span>\n   <span class=\"token keyword\">int</span> userAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// Age</span>\n   \n   <span class=\"token comment\">// Parse name and age values from input string</span>\n   inSS <span class=\"token operator\">>></span> firstName<span class=\"token punctuation\">;</span>\n   inSS <span class=\"token operator\">>></span> lastName<span class=\"token punctuation\">;</span>\n   inSS <span class=\"token operator\">>></span> userAge<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Output parsed values</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"First name: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> firstName <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Last  name: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> lastName <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Age: \"</span>        <span class=\"token operator\">&#x3C;&#x3C;</span> userAge <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//#> First name: Amy</span>\n<span class=\"token comment\">//#> Last  name: Smith</span>\n<span class=\"token comment\">//#> Age: 19</span>\n</code></pre>\n<blockquote>\n<p>The program uses <code>#include &#x3C;sstream></code> for access to the string stream class, which is in <code>namespace std</code>. The line <code>istringstream inSS(userInfo);</code> declares a new stream variable and initializes its buffer to a copy of <code>userInfo</code>. Then, the program can extract data from stream <code>inSS</code> using <code>>></code> similar to extracting from <code>cin</code>.\n.\nA common use of string streams is to process user input line-by-line. The following program reads in the line as a string, and then extracts individual data items from that string.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;sstream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   istringstream inSS<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Input string stream</span>\n   string lineString<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Holds line of text</span>\n   string firstName<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// First name</span>\n   string lastName<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Last name</span>\n   <span class=\"token keyword\">int</span>    userAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Age</span>\n   <span class=\"token keyword\">bool</span>   inputDone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Flag to indicate next iteration</span>\n   \n   <span class=\"token comment\">// Prompt user for input</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter \\\"firstname lastname age\\\" on each line\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"(\\\"Exit\\\" as firstname exits).\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Grab data as long as \"Exit\" is not entered</span>\n   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inputDone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      \n      <span class=\"token comment\">// Entire line into lineString</span>\n      <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> lineString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token comment\">// Copies to inSS's string buffer</span>\n      inSS<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      inSS<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span>lineString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token comment\">// Now process the line</span>\n      inSS <span class=\"token operator\">>></span> firstName<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token comment\">// Output parsed values</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">==</span> <span class=\"token string\">\"Exit\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"   Exiting.\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n         \n         inputDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         inSS <span class=\"token operator\">>></span> lastName<span class=\"token punctuation\">;</span>\n         inSS <span class=\"token operator\">>></span> userAge<span class=\"token punctuation\">;</span>\n         \n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"   First name: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> firstName <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"   Last  name: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> lastName <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"   Age:        \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> userAge   <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//#> Enter \"firstname lastname age\" on each line</span>\n<span class=\"token comment\">//#> (\"Exit\" as firstname exits).</span>\n<span class=\"token comment\">//#> </span>\n<span class=\"token comment\">//#> Mary Jones 22</span>\n<span class=\"token comment\">//#>    First name: Mary</span>\n<span class=\"token comment\">//#>    Last  name: Jones</span>\n<span class=\"token comment\">//#>    Age:        22</span>\n<span class=\"token comment\">//#> </span>\n<span class=\"token comment\">//#> Sally Smith 14</span>\n<span class=\"token comment\">//#>    First name: Sally</span>\n<span class=\"token comment\">//#>    Last  name: Smith</span>\n<span class=\"token comment\">//#>    Age:        14</span>\n<span class=\"token comment\">//#> </span>\n<span class=\"token comment\">//#> Exit</span>\n<span class=\"token comment\">//#>    Exiting.</span>\n</code></pre>\n<h4 id=\"output-stream\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#output-stream\"></a>Output Stream</h4>\n<blockquote>\n<p>The program uses <code>getline</code> to read an input line into a string. The line <code>inSS.str(lineString);</code> uses the <code>str(s)</code> function to initialize the stream's buffer to string <code>s</code>. Afterwards, the program extracts input from that stream using <code>>>.</code> The statement <code>inSS.clear();</code> is necessary to reset the state of the stream so that subsequent extractions start from the beginning; the clear resets the stream's state.\n.\nSimilarly, a new output string stream variable of type <strong>ostringstream</strong> can be created that is associated with a string rather than with the screen (standard output). <strong>ostringstream</strong> is a special kind of (i.e., is derived from) <code>ostream</code>. Once created, a program can insert characters into that stream using <code>&#x3C;&#x3C;</code>, as follows.</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;sstream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   ostringstream fullNameOSS<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Output string stream</span>\n   ostringstream ageOSS<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Output string stream</span>\n   string firstName<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// First name</span>\n   string lastName<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Last name</span>\n   string fullName<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Full name (first and last)</span>\n   string ageStr<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Age (string)</span>\n   <span class=\"token keyword\">int</span> userAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Age</span>\n   \n   <span class=\"token comment\">// Prompt user for input</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Enter \\\"firstname lastname age\\\": \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   cin <span class=\"token operator\">>></span> firstName<span class=\"token punctuation\">;</span>\n   cin <span class=\"token operator\">>></span> lastName<span class=\"token punctuation\">;</span>\n   cin <span class=\"token operator\">>></span> userAge<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Writes to buffer, then copies from buffer into string</span>\n   fullNameOSS <span class=\"token operator\">&#x3C;&#x3C;</span> lastName <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> firstName<span class=\"token punctuation\">;</span>\n   fullName <span class=\"token operator\">=</span> fullNameOSS<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Output parsed input</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> endl <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"   Full name: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> fullName <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Writes int age as chars to buffer</span>\n   ageOSS <span class=\"token operator\">&#x3C;&#x3C;</span> userAge<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Appends (minor) to buffer if less than 21, then</span>\n   <span class=\"token comment\">// copies buffer into string</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userAge <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ageOSS <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" (minor)\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   \n   ageStr <span class=\"token operator\">=</span> ageOSS<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   \n   <span class=\"token comment\">// Output string</span>\n   cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"   Age: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> ageStr <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}