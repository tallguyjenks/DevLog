{"pageProps":{"note":{"id":"6baoi76mio8md4unhxb0105","title":"Mastering Chaos a Netflix Guide to Microservices","desc":"","updated":1657144390650,"created":1657139845632,"url":"https://youtu.be/CZ3wIuvmHeM","custom":{"url":"https://youtu.be/CZ3wIuvmHeM"},"fname":"r.+.2022.07.06.mastering-chaos-a-netflix-guide-to-microservices","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"cb522d90569d5597b3e2bc28b17c3946","links":[],"anchors":{"challenges-and-solutions":{"type":"header","text":"Challenges and Solutions","value":"challenges-and-solutions","line":9,"column":0,"depth":2},"dependency":{"type":"header","text":"Dependency","value":"dependency","line":11,"column":0,"depth":3},"intra-service-requests":{"type":"header","text":"Intra-service Requests","value":"intra-service-requests","line":13,"column":0,"depth":4},"client-libraries":{"type":"header","text":"Client Libraries","value":"client-libraries","line":30,"column":0,"depth":4},"data-persistence":{"type":"header","text":"Data Persistence","value":"data-persistence","line":32,"column":0,"depth":4},"infrastructure":{"type":"header","text":"Infrastructure","value":"infrastructure","line":41,"column":0,"depth":4},"scale":{"type":"header","text":"Scale","value":"scale","line":45,"column":0,"depth":3},"stateless-services":{"type":"header","text":"Stateless Services","value":"stateless-services","line":47,"column":0,"depth":4},"stateful-services":{"type":"header","text":"Stateful Services","value":"stateful-services","line":60,"column":0,"depth":4},"variance":{"type":"header","text":"Variance","value":"variance","line":71,"column":0,"depth":3},"operation-drift":{"type":"header","text":"Operation Drift","value":"operation-drift","line":73,"column":0,"depth":4},"polyglot--containers":{"type":"header","text":"Polyglot & Containers","value":"polyglot--containers","line":97,"column":0,"depth":4},"change":{"type":"header","text":"Change","value":"change","line":119,"column":0,"depth":3}},"children":[],"parent":"p6hffm3ptxx9esrk6z3wokl","data":{}},"body":"<h1 id=\"mastering-chaos-a-netflix-guide-to-microservices\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mastering-chaos-a-netflix-guide-to-microservices\"></a>Mastering Chaos a Netflix Guide to Microservices</h1>\n<h2 id=\"challenges-and-solutions\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#challenges-and-solutions\"></a>Challenges and Solutions</h2>\n<h3 id=\"dependency\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dependency\"></a>Dependency</h3>\n<h4 id=\"intra-service-requests\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#intra-service-requests\"></a>Intra-service Requests</h4>\n<ul>\n<li>Microservice A talking to Microservice B</li>\n<li>Problems\n<ul>\n<li>Network Latency, Congestion, failure</li>\n<li>Logical or Scaling failure</li>\n</ul>\n</li>\n<li>Solutions\n<ul>\n<li>Have a fallback service to call or at the very least a static response that allows the customer to carry on with their business</li>\n<li>fail fast, and return to the fallback or wait to recover</li>\n<li>(FIT) Fault Injection Testing\n<ul>\n<li>Synthetic Transactions</li>\n<li>Override by device or account</li>\n<li>% of live traffic up to 100% (test a launched service under load from live customers)</li>\n<li>Enforced thoughout the call</li>\n</ul>\n</li>\n<li>How do we contrain testing scope?\n<ul>\n<li>the most critical services are identified as a group for barest functionality and a FIT reciepe is made and blacklists all non-essential services</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"client-libraries\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#client-libraries\"></a>Client Libraries</h4>\n<h4 id=\"data-persistence\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-persistence\"></a>Data Persistence</h4>\n<ul>\n<li>CAP Theorem: \"In the presence of a network partition, you much choose between consistency and availability.\"\n<ul>\n<li>If you have 1 service needing to write to 3 databases, what if one write fails?\n<ul>\n<li>Do you cancel the write? or do you write to what you can?</li>\n<li>you can aim for eventual consistency by writing to what databases you can and settle up later</li>\n<li>The client writes to one node which then orchestrates the writing to all the other nodes\n<ul>\n<li>\"Local Quorum\"</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"infrastructure\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#infrastructure\"></a>Infrastructure</h4>\n<ul>\n<li>Have redundant hosting across nodes to prevent catastrophic down time</li>\n</ul>\n<h3 id=\"scale\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scale\"></a>Scale</h3>\n<h4 id=\"stateless-services\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stateless-services\"></a>Stateless Services</h4>\n<ul>\n<li>Its not a cache or database</li>\n<li>frequently accessed metadata</li>\n<li>no instance affinity</li>\n<li>loss of a node is a non-event</li>\n<li>Autoscaling groups\n<ul>\n<li>Compute efficiency</li>\n<li>Node failure</li>\n<li>Traffic Spikes</li>\n<li>Performance Bugs</li>\n</ul>\n</li>\n<li>Chaos monkey tool test that when a node dies, the service continues to work</li>\n</ul>\n<h4 id=\"stateful-services\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stateful-services\"></a>Stateful Services</h4>\n<ul>\n<li>databases and caches</li>\n<li>sometimes a custom app that holds large amounts of data (avoid storing business logic, and state within 1 application if you can avoid it)</li>\n<li>loss of a node is a notable event</li>\n<li>redundancy is fundemental</li>\n<li>EVCache -> difference nodes -> each node has multiple shard caches</li>\n<li>separate out systems used for batch versus real time transactions</li>\n<li>do request level caching</li>\n<li>have an encrypted token with the data to fall back on should the service be unavailable to updated the requested data</li>\n</ul>\n<h3 id=\"variance\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#variance\"></a>Variance</h3>\n<h4 id=\"operation-drift\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#operation-drift\"></a>Operation Drift</h4>\n<ul>\n<li>drift over time\n<ul>\n<li>alert thresholds</li>\n<li>timeouts, retries, fallbacks</li>\n<li>throughput (RPS)</li>\n</ul>\n</li>\n<li>Across microservices\n<ul>\n<li>Reliability best practices</li>\n</ul>\n</li>\n<li>Continious learning and automation\n<ul>\n<li>Incident --> Resolution --> Review --> Remediation --> Analysis --> Best Practices? --> Automation --> Adoption</li>\n</ul>\n</li>\n<li>Production Ready best practices\n<ul>\n<li>Alerts</li>\n<li>Apache &#x26; tomcat</li>\n<li>Automated canary Analysis</li>\n<li>Autoscaling</li>\n<li>Chaos</li>\n<li>Consistent naming</li>\n<li>ELB Config</li>\n<li>Healthcheck</li>\n<li>Immutable machine images</li>\n<li>Squeeze testing</li>\n<li>Staged, red/black deployments</li>\n<li>Timeouts, retries, fallbacks</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"polyglot--containers\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#polyglot--containers\"></a>Polyglot &#x26; Containers</h4>\n<ul>\n<li>The Paved Road (do this for a smooth experience)\n<ul>\n<li>Stash</li>\n<li>Nebula/Gradle</li>\n<li>BaseAMI/Ubuntu</li>\n<li>Jenkins</li>\n<li>Spinnaker</li>\n<li>Runtime Platform</li>\n</ul>\n</li>\n<li>Cost of Variance\n<ul>\n<li>Productivity Tooling</li>\n<li>Insight &#x26; Triage Capabilities</li>\n<li>Base Image Fragmentation</li>\n<li>Node management</li>\n<li>Library/Platform duplication</li>\n<li>Learning curve - production expertise</li>\n</ul>\n</li>\n<li>Strategic Stance\n<ul>\n<li>Raise awareness of costs</li>\n<li>Constrain centralized support</li>\n<li>Prioritize by impact</li>\n<li>Seek reusable solutions</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"change\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#change\"></a>Change</h3>\n<ul>\n<li>Integrated, Automated practices\n<ul>\n<li>Conformity checks</li>\n<li>Red/black pipelines</li>\n<li>Automated canaries</li>\n<li>Staged deployments</li>\n<li>Squeeze tests</li>\n</ul>\n</li>\n</ul>","noteIndex":{"id":"root","title":"root","desc":"","updated":1641013093667,"created":1595961348801,"stub":false,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"DevLog"},"contentHash":"b0b26527a2962dbb8bd5fb9a53ad702f","links":[],"anchors":{},"children":["rzqe5mjn3q2zfscw1roxr20","Bl9NeJmftBQJyJA3X4a6u","inm1S24v2GcN3Quf7gzDb","fmx7cfcdzale0ezna61yq5z","q6tr8q7gahfijix2ktlhcu3","yah6spesmpstech2ue2k3lq","6pxwlugphnw6vm4t8kn0j5p","i17wi8y2hgivywe08h6q6it","1st35wikvph2aew8aana21u","mijr0wvj3qz0mt9pv9xo1jv","qaf8v120h0ffvbowysjxw50","sh4851li2rsrhx47wwsirgv","fwqjigvqyfxiyl3pbpjvgdw","pxdvvln974xhe8w0alh0hoy","n6yddb1smrac5ll3l1y6wbd","g5dllyqoqkenoiz3opalzu6","kbwt8ucy0yh6bo8fl0kv9iw","beykavbe22agsufmm03hu0c","2uvuqa3c15o5r4j7sqadqvr","yr6gzhx0bhzyec6f52y66vf","4no90tcdswtuwmjm0bxnetx"],"parent":null,"data":{},"body":"\nThe hyperfixated rabbit hole diving knowledge base that is my brain looking at technology.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"sterkere","visibility":"private"},{"fsPath":"Norsk","visibility":"private"},{"fsPath":"DevLog"}],"journal":{"dailyDomain":"log","name":"daily","dateFormat":"yyyy.MM.dd","addBehavior":"childOfCurrent"},"scratch":{"name":"scratch","dateFormat":"yyyy.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"todoIntegration":true,"name":"task","dateFormat":"yyyy.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"wip","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.95.1","enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":false,"templateHierarchy":"template","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"theme":"custom","enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/DevLog","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://{GITHUB_USERNAME}.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["DevLog"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"master","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}